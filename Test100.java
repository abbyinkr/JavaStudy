/*=============================
   ■■■ 만년 달력 ■■■
=============================*/

// ○ 다음과 같은 프로그램을 구현한다.

// 실행 예)
// 『연도』를 입력하세요 : 2021
// 『월』을 입력하세요	 : 7
/*
	[ 2021년 7월 ]

 일  월  화  수  목  금  토 
===========================
				  1   2   3
  4   5   6   7   8   9  10
 11  12  13  14  15  16  17
 18  19  20  21  22  23  24
 25  26  27  28  29  30  31
===========================
계속하려면 아무 키나...


// ※ 문제 인식 및 분석	
	- 서기 1년 1월 1일 : 월요일

	- 연도가 4의 배수이면서 100의 배수가 아니거나,
	  400의 배수이면 2월은 29일(윤년),
	  나머지 2월은 28일(평년)

	- 2021년 7월의 달력을 그린다고 가정하면
	  1. 1. 1. ~ 2021.6.30 까지의 전체 날수를 구한다.
	  그 날 수에 +1 연산을 수행하면... (2021년 7월 1일의 요일 확인)
	  7월의 달력 그릴 준비 끝~!!
	- 요일 = 전체날수 % 7
	  요일 = 0 → 일요일
	         1 → 월요일
			 	:
			 6 → 토요일
*/

import java.util.Scanner;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Test100
{
	public static void main(String[] args) throws IOException
	{
		// 나의 풀이법
		/* 
		// Scanner 인스턴스 생성
		Scanner sc = new Scanner(System.in);

		int year;
		int month;

		// 사용자에게 연도와 월 입력받기
		do
		{
			System.out.print("『연도』를 입력하세요 : ");
			year = sc.nextInt();
		}
		while (year < 1);

		do
		{
			System.out.print("『월』을 입력하세요	: ");
			month = sc.nextInt();
		}
		while (month<1 || month>12);

		// 1-31 2-29 3-31 4-30 5-31 6-30 7-31 8-31 9-30 10-31 11-30 12-31

		// 1년 1월 1일은 월요일 

		
				[ 1년 1월 ]

		 일  월  화  수  목  금  토 
		===========================
			  1	  2   3   4   5   6
		  7   8   9  10  11  12  13  
		 14  15  16  17  18  19  20
		 21  22  23  24  25  26  27
		 28  29  30  31
		===========================

		

		int[] monthDays = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		String[] weekNames = {"일", "월", "화", "수", "목", "금", "토"};
		int nalsu;
		int w;

		if (year%4==0 && year%100!=0 || year%400==0)		//-- 입력한 연도가 윤년이라면...
		{
			// 2월의 마지막 날짜를 29일로 설정
			monthDays[1] = 29;
		}
		else										//-- 입력한 연도가 평년이라면...
		{
			monthDays[1] = 28;
		}
		// 방이 monthDays[i]개인 배열 days 생성 (윤년, 평년 개념적용)
		int[] days = new int[monthDays[month-1]];		// 1월이면 31개

		// 일수 
		int n = 1;

		// 만든 days 배열에 일수 하나씩 담기
		for (int i=0; i<days.length; i++)		// month = 1 일때
		{
			days[i] = n;					// day[0] = 1, day[1] = 2 ... day[30] = 31;
			n++;
		}

		// ① 1년 1월 1일 부터 입력받은 년도의 ^이전 년도^ 12월 31일 까지의 날 수 계산
		nalsu = (year-1)*365 + (year-1)/4 - (year-1)/100 + (year-1)/400;

		// ② 해당 년도의 1월 1일 부터 입력받은 월의 이전 월까지의 
		//	  날 수 계산 후 1번 결과에 더하는 연산
		for (int i=0; i<(month-1); i++)		// m-1 체크 (1월이면 pass!) 배열을 바꾸는것보다 조건문을 고치는게 깔끔
		{
			nalsu += monthDays[i];
		}
		//++nalsu; ( ※ 전월 달 마지막 날수 + 1 해야지 해당 월 1일 시작일이다)
		// nalsu += 1;
		w = (nalsu%7)+1;
							
		System.out.printf("1일이 시작하는 날 %s요일\n", weekNames[w]);
		// w = 0 → 일요일  
		// w = 1 → 월요일  공백 1번 출력 하고 시작
		// w = 2 → 화요일  공백 2번 출력 하고 시작
		//				:			   
		// w = 6 → 토요일  공백 6번 출력 하고 시작

		// 달력 출력 서식 구문 		
		System.out.println();		// 개행
		System.out.printf("      [  %4d년 %2d월  ]      ", year, month);
		System.out.println();		// 개행
		System.out.println("============================");
		for (int i=0 ; i<weekNames.length; i++)
			System.out.printf("%3s", weekNames[i]);
		System.out.println();		// 개행

		
		// 달력날짜 출력 구문 


		// w = 0 → 일요일  
		// w = 1 → 월요일  공백 1번 출력 하고 시작
		// w = 2 → 화요일  공백 2번 출력 하고 시작
		//				:			   
		// w = 6 → 토요일  공백 6번 출력 하고 시작

		
		int i;
		for (i=1; i<=w; i++)
		{
			System.out.print("    ");
		}
		// day 배열의 전체요소를 출력한다
		for (int j=0; j<days.length; j++)
		{
			System.out.printf("%4d", days[j]);
			
			// 7개 출력되면 한줄 개행되게 반복한다.
			if ((i+j)%7==0)
			System.out.println();
		}
		
		System.out.printf("\n============================\n");
		/*
		내 아이디어 : 아래에kfor문 하나더 만들어서 k%7==0 될때마다 개행해주고
		시작하는 요일 = 1일 시작하는 날 될때까지 공백출력 
		

		*/

		// [선생님 풀이]
		
		// BufferedReader 클래스 인스턴스 생성
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		// 배열 선언 및 초기화
		// 각 달이 담고있는 마지막 날짜(매 월의 최대 날짜);
		int[] days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

		// 확인
		//System.out.println(days.length);
		//--==>> 12

		// 주요 변수 선언
		int nalsu, y, m, w;		//-- 날수, 년, 월, 요일

		do
		{
			System.out.print("『연도』를 입력하세요 : ");
			y = Integer.parseInt(br.readLine());
		}
		while (y<1);

		do
		{
			System.out.print("『월』을 입력하세요 : ");
			m = Integer.parseInt(br.readLine());
		}
		while (m < 1 || m > 12);

		//------------------------- 여기까지 수행하면 유효한 연도, 월 입력한 상태

		// 입력받은 년도의 해당하는 2월의 마지막 날 계산

		if ( (y%4==0 && y%100!=0) || y%400==0)
			days[1] = 29;
		else
			days[1] = 28;	

		//-- else 구문은 
		//   현재 days 배열의 1번째 요소가 기본적으로 28로 입력되어있는
		//	 상태이기때문에 생략이 가능한 구문이 된다.

		// 1년 1월 1일 ~ 입력받은 년도 이전년도의 12월 31일까지의 
		// 날수 계산
		nalsu = (y-1)*365 + (y-1)/4 - (y-1)/100 + (y-1)/400;

		// 확인
		//System.out.println(nalsu);
		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		737059
		계속하려면 아무 키나 누르십시오 . . .
		*/

		// 입력받은 년도(해당년도) 1월 1일 ~ 입력한 월의 이전 월 까지의
		// 날 수 누적 연산
		// 즉, 위의 예에 따르면...
		// 2019년 1월 1일 ~ 2019년 4월 30일 까지의 날 수 누적하여
		// 기존 nalsu 에 누적

		for (int i=0 ; i<(m-1); i++)		// i<(m-1) check~!!
			nalsu += days[i];
		
		// 확인
		//System.out.println(nalsu);
		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		737179							→ 1.1.1 ~ 2019.4.30 날수
		계속하려면 아무 키나 누르십시오 . . .
		*/

		//입력받은 월의 1일
		nalsu += 1;				//++nalsu;

		//확인
		//System.out.println(nalsu);

		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		737180							→ 1.1.1 ~ 2019.5.1 날수
		계속하려면 아무 키나 누르십시오 . . .
		*/

		//--------------------------- 여기까지 수행하면 모든 날수에 대한 종합 완료

		// 요일 산출
		// : 입력받은 월의 1일이 무슨 요일인지 확인하기 위한 연산
		w = nalsu%7;//-- 0 : 일요일 .... 6: 토요일

		//확인
		//System.out.println(w);
		/*
		『연도』를 입력하세요 : 2019
		『월』을 입력하세요 : 5
		737180
		3								→ 2019년 5월 1일 → 수요일
		계속하려면 아무 키나 누르십시오 . . .

		*/


		// 출력(달력 그리기)

		System.out.println();
		System.out.printf("\t[%4d년 %3d일]\n", y, m);
		System.out.println();
		System.out.println("  일  월  화  수  목  금  토"); // 두 칸 공백
		System.out.println("============================");
		
		// 특정 요일부터 1일이 출발할 수 있도록 공백 발생(지정)
		// w = 0 → 일요일  
		// w = 1 → 월요일  공백 1번 출력 하고 시작
		// w = 2 → 화요일  공백 2번 출력 하고 시작
		//				:			   
		// w = 6 → 토요일  공백 6번 출력 하고 시작
		for (int i=1; i<=w ; i++)
			System.out.print("    ");						// 네 칸 공백

		// 확인 check~!!
		//System.out.printf("%4d", 1);

		// 해당 월(입력한 월)의 날짜만 출력될 수 있도록 반복문 구성
		for (int i=1; i<=days[m-1]; i++)
		{
			System.out.printf("%4d", i);
			w++;			//-- 날짜가 증가하는 만큼

			if (w%7==0)		// 일요일마다
			{
				System.out.println(); //개행
			}
		}
		// 달의 마지막 날짜가 출력형식을 모두 채웠을 경우
		// 이미 일요일 개행이 이루어졌기 때문에
		// 이 경우에는 추가 개행을 하지 않도록 처리
		if (w%7!=0)
			System.out.println();
		
		System.out.println("============================");

	}
}

/* [실행 결과]
『연도』를 입력하세요 : 2021
『월』을 입력하세요 : 7

        [2021년   7일]

  일  월  화  수  목  금  토
============================
                   1   2   3
   4   5   6   7   8   9  10
  11  12  13  14  15  16  17
  18  19  20  21  22  23  24
  25  26  27  28  29  30  31
============================
계속하려면 아무 키나 누르십시오 . . .

『연도』를 입력하세요 : 2020
『월』을 입력하세요 : 2

        [2020년   2일]

  일  월  화  수  목  금  토
============================
                           1
   2   3   4   5   6   7   8
   9  10  11  12  13  14  15
  16  17  18  19  20  21  22
  23  24  25  26  27  28  29
============================
계속하려면 아무 키나 누르십시오 . . .

*/
